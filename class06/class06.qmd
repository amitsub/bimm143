---
title: "class06"
author: "Amit Subramanian"
format: pdf
---

This week we are introducing **R functions** and how to write our own R functions.

Questions to answer:

> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

# Example input vectors to start with

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)

student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)

student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

```{r}
# Straight forward mean()
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)

mean(student1)
```


But... we need to drop the lowest score.  First we need to identify the lowest score. 

```{r}
# Which element of the vector is the lowest?
which.min(student1)
```

What I want to do is now drop this lowest score form my mean() calculation.

```{r}
# This will return everything but the eighth element of the vector
student1[-8]
```

Now we can use the answer from which.min() to return all other elements of the vector

```{r}
# First working snippet
student1[-which.min(student1)]
```

What about the other example students? Will this work for them?

We could try using na.rm=TRUE argument for mean, but will not work for an example like student 3, due to numerous NA scores. Not a good approach (unfair to others).

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
mean(student2, na.rm=TRUE)


student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
mean(student3, na.rm=TRUE)
```

Another approach is to replace all NA values with zero.

First we need to find the NA elements of the vector, how can we do this?

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
x <- student2

is.na(x)
which( is.na(x) )
```

Now that we have identified the NA elements, how do we replace them with zero?

```{r}
# Not quite there yet
mean(x[-which(is.na(x))])
```

Instead, we want to make the NA elements zero

```{r}
x[is.na(x)] <- 0
x

mean(x)
```

We now must drop the lowest score

```{r}
x[is.na(x)] <- 0
mean( x[-which.min(x)] )
```

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
x <- student3

x[is.na(x)] <- 0
mean( x[-which.min(x)] )
```

## Now we make our function

Take the snippet and turn it into a function
Make sure to include three essential parts of a function

- A name, in our example: `grade()`
- Input arguments, a vector of student scores
- The body (working snippet of code)

Using RStudio, I will select `Code > Extract Function`

```{r}
grade <- function(x) {
  x[is.na(x)] <- 0
  mean( x[-which.min(x)] )
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

This now looks good, we now just need to add comments in order for our future selves or others who may want to use this function.

```{r}
#' Calculate the average score for a vector of student scores, dropping the lowest #'  score. 
#'  Missing values will be treated as zero.
#'  
#' @param x A numeric vector of homework scores
#' 
#' @return Average score
#' @export
#' 
#' @examples
#'  student <- c(100, NA, 90, 97)
#'  grade(student)
#'  

grade <- function(x) {
  # mask NA with zero
  # treat missing values as zero
  x[is.na(x)] <- 0
  # exclude lowest score from mean
  mean( x[-which.min(x)] )
}
```

Now we are able to use our function on our entire class data from the CSV format file: “https://tinyurl.com/gradeinput” 

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)
```

```{r}
apply(gradebook, 1, grade)
```

> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

To answer this we run the apply() function and save the results.  

```{r}
results <- apply(gradebook, 1, grade)
# Sorts the student results by lowest to highest scores
sort(results)
```

```{r}
results <- apply(gradebook, 1, grade)
# Sorts the results from highest to lowest score
sort(results, decreasing = TRUE)
```

```{r}
which.max(results)
```

> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
gradebook
```

```{r}
avg.scores <- apply(gradebook, 2, mean, na.rm=TRUE)
avg.scores
which.min(avg.scores)
```

```{r}
med.scores <- apply(gradebook, 2, median, na.rm=TRUE)
med.scores
which.min(med.scores)
```

```{r}
boxplot(gradebook)
```

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

Are the final results (avg score for each student) correlated with the results for individual homeworks - the gradebook columns. 

```{r}
masked.gradebook <- gradebook
masked.gradebook[ is.na(masked.gradebook) ] <- 0
masked.gradebook
```

Now look at correlation

```{r}
cor(results, masked.gradebook$hw5)
```

```{r}
apply(masked.gradebook, 2, cor, x=results)
```

> Q5. Make sure you save your Quarto document and can click the “Render” (or Rmarkdown”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. [1pt]

Render the document to make a PDF