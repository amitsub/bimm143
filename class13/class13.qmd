---
title: "class13"
author: "Amit Subramanian"
format: pdf
---


## 1. Bioconductor setup


Install packages using these commands.

```{r}
# install.packages("BiocManager")
# BiocManager::install()
# BiocManager::install("DESeq2")
```


## 2. Import countData and colData


```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

Let's view the head of each.

```{r}
head(counts)
```

```{r}
head(metadata)
```


> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

There are 38,694 genes in this dataset.  


> Q2. How many ‘control’ cell lines do we have?

```{r}
table(metadata$dex)['control']
```

We have 4 'control' cell lines.


## 3. Toy differential gene expression


Let's find the sample id for those labeled control.

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

Let's do this same thing using the dplyr package from the tidyverse as an alternate way.

```{r}
# library(dplyr)
# control <- metadata %>% filter(dex=="control")
# control.counts <- counts %>% select(control$id) 
# control.mean <- rowSums(control.counts)/4
# head(control.mean)
```


> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

Instead of using the rowSums then dividing by 4, we could use rowMeans instead. This code is not applicable in many situations as there will be many datasets which do not have 4 total, so if we use the function rowMeans, the code would be more robust as it would be general to all datasets.


> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[,treated$id]
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```


Let's combine our meancount data to make it more organized.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```


> Q5a. Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts)
```


> Q5b. You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)
ggplot(data = meancounts) +
  geom_point(mapping=aes(x=control.mean, y=treated.mean))
```


> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(log(meancounts))
```


Let's try to find candidate differentially expressed genes by looking for genes with a large change between control and dex-treated samples.

```{r}
# Adds log2fc column into dataframe
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

Now let's remove the genes with zero expression.

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```


> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The purpose of the arr.ind arguement is to get the columns and rows.


Let’s filter the dataset both ways to see how many genes are up or down-regulated.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```


> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

We have 250 up regulated genes at the greater than 2 fc level.


> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

We have 367 down regulated genes at the greater than 2 fc level.


> Q10. Do you trust these results? Why or why not?

I do not fully trust these results as they are likely still very misleading because we have not done anything to determine if the differences we are seeing are significant.    


## 4. Setting up for DESeq


```{r}
library(DESeq2)

dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

```{r}
dds <- DESeq(dds)
```

We can now get our results.

```{r}
res <- results(dds)
res
```

We can now get some basic summary tallies using the 'summary()' function.

```{r}
summary(res)
```


## 5.  Principal Component Analysis (PCA)


```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

We can also build the PCA plot from scratch using the ggplot2 package.

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
library(ggplot2)

ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```


## 6. Adding annotation data


Let's install some more packages.
```{r}
# BiocManager::install("AnnotationDbi")
# BiocManager::install("org.Hs.eg.db")

# library("AnnotationDbi")
# library("org.Hs.eg.db")
```


Let's try to get a list of all available key types that we can use to map between, use the 'columns()' function

```{r}
library('org.Hs.eg.db')

columns(org.Hs.eg.db)
```

Here we ask to just give us back the first one that occurs in the database.

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")

head(res)
```


> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

You can arrange and view the results by the adjusted p-value.

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```


## 7. Data Visualization (Volcano Plots)


Let’s make a commonly produced visualization from this data, namely a so-called Volcano plot.

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

To make this more useful we can add some guidelines (with the abline() function) and color (with a custom color vector)

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

To color the points we will setup a custom color vector indicating transcripts with large fold change and significant differences between conditions

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```
